// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestGraphQL.Data;

#nullable disable

namespace SyncApiTest.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230401130316_Migration_3")]
    partial class Migration_3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.4");

            modelBuilder.Entity("TestGraphQL.Models.Dog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int?>("Age")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Breed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Color")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastSyncedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LocalDateUpdate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("OwnerId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ServerDateUpdated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Dogs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6d8a44eb-0a51-46d9-ac72-80ffdd39cc5a"),
                            Age = 9,
                            Breed = 0,
                            Color = "Black",
                            Deleted = false,
                            Name = "Lucy",
                            OwnerId = new Guid("27b051cc-9147-475e-ae7b-386d2386e5d7")
                        },
                        new
                        {
                            Id = new Guid("b7fda981-c976-4d02-8fd2-dcf74966f269"),
                            Age = 3,
                            Breed = 1,
                            Color = "Golden",
                            Deleted = false,
                            Name = "Ruby",
                            OwnerId = new Guid("27b051cc-9147-475e-ae7b-386d2386e5d7")
                        },
                        new
                        {
                            Id = new Guid("f9b51f07-182b-4760-8bd4-55661ad19fd3"),
                            Age = 5,
                            Breed = 2,
                            Color = "Brown",
                            Deleted = false,
                            Name = "Max",
                            OwnerId = new Guid("18126184-f3a0-4a5d-826c-75318f3a0053")
                        },
                        new
                        {
                            Id = new Guid("49a83292-4f5d-41a3-b3c6-2dddf00b02f4"),
                            Age = 2,
                            Breed = 3,
                            Color = "White",
                            Deleted = false,
                            Name = "Buddy",
                            OwnerId = new Guid("18126184-f3a0-4a5d-826c-75318f3a0053")
                        });
                });

            modelBuilder.Entity("TestGraphQL.Models.Owner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Age")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastSyncedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LocalDateUpdate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ServerDateUpdated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Owners");

                    b.HasData(
                        new
                        {
                            Id = new Guid("27b051cc-9147-475e-ae7b-386d2386e5d7"),
                            Age = 35,
                            Deleted = false,
                            Name = "John Doe"
                        },
                        new
                        {
                            Id = new Guid("18126184-f3a0-4a5d-826c-75318f3a0053"),
                            Age = 30,
                            Deleted = false,
                            Name = "Jane Doe"
                        });
                });

            modelBuilder.Entity("TestGraphQL.Models.Dog", b =>
                {
                    b.HasOne("TestGraphQL.Models.Owner", "Owner")
                        .WithMany("Dogs")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("TestGraphQL.Models.Owner", b =>
                {
                    b.Navigation("Dogs");
                });
#pragma warning restore 612, 618
        }
    }
}
